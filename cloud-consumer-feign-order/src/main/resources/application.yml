server:
  port: 80

mybatis:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.yunbocheng.springcloud.entities
  configuration:
    map-underscore-to-camel-case: true

spring:
  application:
    name: cloud-consumer-feign-order
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/cloud_study?characterEncoding=utf8&useSSL=false&serverTimezone=GMT%2B8&rewriteBatchedStatements=true&allowPublicKeyRetrieval=true
    username: root
    password: 567cybtfboys
  profiles:
    active: dev
  main:
    allow-bean-definition-overriding: true
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery:
        service-name: ${spring.application.name}
      config:
        profile-separator: '-'
        format: YAML
  openfeign:
    client:
      config:
        # 使用 default 是 openFeign 的全局配置，所有的服务都使用这个配置
        #        default:
        #          # openFeign的默认等待市场为：60s
        #          # 连接超时时间（针对 openFeign 的配置，当使用 openFeign 调用服务模块的时候，如果超过等待时间，openFeign 会报错）
        #          connectTimeout: 20000
        #          # 读取超时时间
        #          readTimeout: 20000
        # 针对某个服务精确的配置，可以设置不通服务的等待时长等（此时该配置会覆盖默认的配置）
        cloud-provider-payment: # 服务名
          connectTimeout: 20000
          readTimeout: 20000
    # 将 openFeign 使用JDK中默认的Http包替换为 apach的hc5，支持完成http请求的更多配置
    httpclient:
      hc5:
        enable: true
    # 开启 openFeign 的请求和响应数据压缩功能
#    compression:
#      request:
#        enabled: true
#        min-request-size: 2048 #最小触发压缩的大小
#        mime-types: text/xml,application/xml,application/json #触发压缩数据类型
#      response:
#        enabled: true
    # 开启circuitbreaker和分组激活 spring.cloud.openfeign.circuitbreaker.enabled
    circuitbreaker:
      enabled: true
#      group:
#        enabled: true #没开分组永远不用分组的配置。精确优先、分组次之(开了分组)、默认最后

# 开启 openFeign 的日志功能
# 公式(三段): logging.level + 含有@FeignClient注解的完成带包名的接口名字 + debug
logging:
  level:
    com:
      yunbocheng:
        springcloud:
          apis:
            PayFeignApi: debug

#  Resilience4j CircuitBreaker 按照次数：COUNT_BASED 的例子
#  6次访问中当执行方法的失败率达到50%时CircuitBreaker将进入开启OPEN状态(保险丝跳闸断电)拒绝所有请求。
#  等待5秒后，CircuitBreaker 将自动从开启OPEN状态过渡到半开HALF_OPEN状态，允许一些请求通过以测试服务是否恢复正常。
#  如还是异常CircuitBreaker 将重新进入开启OPEN状态；如正常将进入关闭CLOSE闭合状态恢复正常处理请求。
#resilience4j:
#  circuitbreaker:
#    configs:
#      default:
#        failureRateThreshold: 50 #设置50%的调用失败时打开断路器，超过失败请求百分⽐CircuitBreaker变为OPEN状态。
#        slidingWindowType: COUNT_BASED # 滑动窗口的类型
#        slidingWindowSize: 6 #滑动窗⼝的⼤⼩配置COUNT_BASED表示6个请求，配置TIME_BASED表示6秒
#        minimumNumberOfCalls: 6 #断路器计算失败率或慢调用率之前所需的最小样本(每个滑动窗口周期)。如果minimumNumberOfCalls为10，则必须最少记录10个样本，然后才能计算失败率。如果只记录了9次调用，即使所有9次调用都失败，断路器也不会开启。
#        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否启用自动从开启状态过渡到半开状态，默认值为true。如果启用，CircuitBreaker将自动从开启状态过渡到半开状态，并允许一些请求通过以测试服务是否恢复正常
#        waitDurationInOpenState: 5s #从OPEN到HALF_OPEN状态需要等待的时间
#        permittedNumberOfCallsInHalfOpenState: 2 #半开状态允许的最大请求数，默认值为10。在半开状态下，CircuitBreaker将允许最多permittedNumberOfCallsInHalfOpenState个请求通过，如果其中有任何一个请求失败，CircuitBreaker将重新进入开启状态。
#        recordExceptions:
#          - java.lang.Exception
#      instances:
#        cloud-payment-service:
#          baseConfig: default

# Resilience4j CircuitBreaker 按照时间：TIME_BASED 的例子
#resilience4j:
#  timelimiter:
#    configs:
#      default:
#        timeout-duration: 10s #神坑的位置，timelimiter 默认限制远程1s，超于1s就超时异常，配置了降级，就走降级逻辑
#  circuitbreaker:
#    configs:
#      default:
#        failureRateThreshold: 50 #设置50%的调用失败时打开断路器，超过失败请求百分⽐CircuitBreaker变为OPEN状态。
#        slowCallDurationThreshold: 2s #慢调用时间阈值，高于这个阈值的视为慢调用并增加慢调用比例。
#        slowCallRateThreshold: 30 #慢调用百分比峰值，断路器把调用时间⼤于slowCallDurationThreshold，视为慢调用，当慢调用比例高于阈值，断路器打开，并开启服务降级
#        slidingWindowType: TIME_BASED # 滑动窗口的类型
#        slidingWindowSize: 2 #滑动窗口的大小配置，配置TIME_BASED表示2秒
#        minimumNumberOfCalls: 2 #断路器计算失败率或慢调用率之前所需的最小样本(每个滑动窗口周期)。
#        permittedNumberOfCallsInHalfOpenState: 2 #半开状态允许的最大请求数，默认值为10。
#        waitDurationInOpenState: 5s #从OPEN到HALF_OPEN状态需要等待的时间
#        recordExceptions:
#          - java.lang.Exception
#    instances:
#      cloud-payment-service:
#        baseConfig: default

#management:
#  zipkin:
#    tracing:
#      endpoint: http://localhost:9411/api/v2/spans
#  tracing:
#    sampling:
#      probability: 1.0 #采样率默认为0.1(0.1就是10次只能有一次被记录下来)，值越大收集越及时。